# Makefile.in
#
# Copyright (C) 1995-96 Martin Anton Ertl, Christian Pirker
#
# This file is part of RAFTS.
#
#	RAFTS is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License
#	as published by the Free Software Foundation; either version 2
#	of the License, or (at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

#To do:
#use $(srcdir) to make compilation in a non-srcdir possible

VERSION	= 0.2.0#gforth version
SHELL	= /bin/sh
RM	= rm -f
CP	= cp
INSTALL	= @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_DIR = ./install-sh -d
LN_S	= @LN_S@
GCC	= @CC@
CC	= $(GCC)
STRIP	= strip
TEXI2DVI = texi2dvi
DVI2PS	= dvips -D300
#you can get texi2html from http://asis01.cern.ch/infohtml/texi2html.html
TEXI2HTML = texi2html
MAKEINFO = makeinfo
XCFLAGS	= @CFLAGS@
XDEFINES = @DEFS@
SWITCHES = $(XCFLAGS) $(XDEFINES) #-DNDEBUG #turn off assertions
DEBUGFLAG = @DEBUGFLAG@
CFLAGS	= $(SWITCHES) $(DEBUGFLAG) -O2 -Wall

XLDFLAGS = @LDFLAGS@
GCCLDFLAGS = @GCCLDFLAGS@
LDFLAGS	= -s $(DEBUGFLAG) $(XLDFLAGS) $(GCCLDFLAGS)
LDLIBS	= @LIBS@

VPATH	= @srcdir@
prefix	= @prefix@
exec_prefix = @exec_prefix@
srcdir	= @srcdir@
bindir	= $(exec_prefix)/bin
#read-only architecture-independent files
datadir	= $(prefix)/share
#read-only architecture-dependent non-ascii files
libdir	= $(prefix)/lib
infodir	= $(prefix)/info
mandir	= $(prefix)/man
man1dir	= $(mandir)/man1
man1ext	= .1
#older emacses have their site-lisp in $(libdir)/emacs/
emacssitelispdir = $(datadir)/emacs/site-lisp

YFLAGS	= -d
YACC	= bison -y
LEX	= flex -l

BURG	= burg/burg
BFEF	= burg/bfef
BURGFLAGS = -d -= -I

DIR		= examples

FORTH		= gforth
FORTH_FILE	= compiler.fs
FORTH_FILE.p	= $(DIR)/pperf.fs
TIME		= time
DIFF		= diff

COMPILER	= compiler.fs options.fs \
		  mips/r3000.asm.fs mips/r3000.asm.opc.fs regs.fs \
		  mips/r3000.disasm.fs mips/r3000.disasm.opc.fs \
		  node.fs dataflow.fs basic.fs func.fs \
		  primitives.fs control.fs primitives_ext.fs \
		  inst-selection.fs inst-scheduling.fs \
		  stdlib/stdlib.fs stdlib/marray.fs stdlib/array.fs \
		  stdlib/slist.fs stdlib/dlist.fs stdlib/queue.fs \
		  stdlib/stack.fs stdlib/btree.fs stdlib/string.fs

FILES		= $(wildcard $(DIR)/dmp*.fs) \
		  $(wildcard $(DIR)/s*.fs)
DMP		= $(FILES:.fs=.dmp)
FILES.p1	= $(FILES:.fs=.p1)
FILES.p2	= $(FILES:.fs=.p2)
DIFFS		= $(FILES:.fs=.diff)

INCLUDES =

OBJECTS	= $(BU_OBJS) $(FE_OBJS)
SOURCES	= CVS Makefile.in configure.in configure config.sub config.guess \
	$(INCLUDES) $(COMPILER) $(FILES)

#distributed documentation
DOCDIST =

GEN	=
GEN_PRECIOUS = Makefile configure

#standards.info recommends this:

%.dmp:		%.fs $(COMPILER)
		$(FORTH) $(FORTH_FILE) $(FORTH_FILE) $< >$@ 2>&1
%.p1:		%.fs $(COMPILER)
		$(TIME) $(FORTH) $(FORTH_FILE) $(FORTH_FILE) $< >$@ 2>&1
%.p2:		%.fs $(COMPILER)
		$(TIME) $(FORTH) $(FORTH_FILE.p) $< >$@ 2>&1
%.diff:		%.p1 %.p2
		-$(DIFF) $^ >$@
.SUFFIXES:	.dmp .p1 .p2 .diff

%.gr:		%.burg $(BFEF).awk
		$(BFEF) $< >$@
%.fs:		%.gr
		$(BURG) -F $(BURGFLAGS) -o $@ $<
.SUFFIXES:	.gr .fs

all:		grammar.fs asm.fs disasm.fs

dmp:		$(DMP)
dmpclean:	
		$(RM) $(DMP)
diff:		$(FILES.p1) $(FILES.p2) $(DIFFS)
diffclean:
		$(RM) $(FILES.p1) $(FILES.p2) $(DIFFS)

#from the gcc Makefile: 
#"Deletion of files made during compilation.
# There are four levels of this:
#   `mostlyclean', `clean', `distclean' and `realclean'.
# `mostlyclean' is useful while working on a particular type of machine.
# It deletes most, but not all, of the files made by compilation.
# It does not delete libgcc.a or its parts, so it won't have to be recompiled.
# `clean' deletes everything made by running `make all'.
# `distclean' also deletes the files made by config.
# `realclean' also deletes everything that could be regenerated automatically."

mostlyclean:	dmpclean diffclean
		$(RM) *.aux *.log

clean:		mostlyclean
		$(RM) *.dmp *.p1 *.p2 *.diff
		$(RM) *.o core

distclean:	clean
		$(RM) header.fs
		$(RM) grammar.burg grammar.gr grammar.fs
		$(RM) asm.fs disasm.fs
		$(RM) config.cache config.log config.status Makefile

realclean:	distclean
		$(RM) $(GEN)
		$(RM) *.dvi

dist:		$(SOURCES) $(DOCDIST)

install:	all

uninstall:

dvi:

# For an explanation of the following Makefile rules, see node
# `Automatic Remaking' in GNU Autoconf documentation.
$(srcdir)/configure: configure.in 
		cd $(srcdir) && autoconf
     
# autoheader might not change config.h.in, so touch a stamp file.
$(srcdir)/config.h.in: stamp-h.in
$(srcdir)/stamp-h.in: configure.in  acconfig.h
		cd $(srcdir) && autoheader
		echo timestamp > $(srcdir)/stamp-h.in

config.h: stamp-h
stamp-h: config.h.in config.status
		CONFIG_FILES=$@ CONFIG_HEADERS=config.h ./config.status
		echo > stamp-h
Makefile: Makefile.in config.status
		CONFIG_FILES=$@ CONFIG_HEADERS=config.h ./config.status
     
config.status: configure
		./config.status --recheck
