%{
\\ grammar.burg	mips BURG grammar
\\
\\ Copyright (C) 1995-97 Martin Anton Ertl, Christian Pirker
\\
\\ This file is part of RAFTS.
\\
\\	RAFTS is free software you can redistribute it and/or
\\	modify it under the terms of the GNU General Public License
\\	as published by the Free Software Foundation; either version 2
\\	of the License, or (at your option) any later version.
\\
\\	This program is distributed in the hope that it will be useful,
\\	but WITHOUT ANY WARRANTY; without even the implied warranty of
\\	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\\	GNU General Public License for more details.
\\
\\	You should have received a copy of the GNU General Public License
\\	along with this program; if not, write to the Free Software
\\	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

include machine/header.fs
include machine/assembling.fs

\' il-op alias OP-LABEL
\' il-slabel alias STATE-LABEL
\' il-left alias LEFT-CHILD
\' il-right alias RIGHT-CHILD

\' .\" alias burm-PANIC\" immediate

0 constant none
1 constant unary
2 constant binary

: bin-inst ( left-ml right-ml il-addr nt asm-xt -- ml )
    inst-ok
    tuck ml-right !
    tuck ml-left ! ;

: binrc-inst ( left-ml n il-addr nt asm-xt -- ml )
    inst-ok
    tuck ml-val !
    tuck ml-left !
    NIL over ml-right ! ;

: un-inst ( left-ml il-addr nt asm-xt -- ml )
    inst-ok
    tuck ml-left !
    NIL over ml-right ! ;

: 0branch-inst ( left-ml il-addr nt asm-xt -- ml )
    un-inst
    dup ml-delay on
    0 over ml-cost ! ;

: term-inst ( il-addr nt asm-xt -- ml )
    inst-ok
    NIL over ml-left !
    NIL over ml-right ! ;

: branch-inst ( il-addr nt asm-xt -- ml )
    term-inst
    dup ml-delay on
    0 over ml-cost ! ;

: lit-inst ( n il-addr nt asm-xt -- ml )
    term-inst
    tuck ml-val ! ;

: store-inst ( left-ml right-ml n il-addr nt asm-xt -- ml )
    inst-ok
    tuck ml-val !
    tuck ml-right !
    tuck ml-left !
    \\ store does not produce a result
    0 over ml-reg ! ;

: load-inst ( ml n il-addr nt asm-xt -- ml )
    inst-ok
    tuck ml-val !
    tuck ml-left !
    NIL over ml-right !
    dup ml-delay on ;

: move-inst ( left-ml il-addr nt asm-xt -- ml )
    inst-ok
    tuck ml-left !
    NIL over ml-right ! ;

%}

%start stmt

/* unary operators	*/
%term I_INVERT
%term I_NEGATE
/* binary operators	*/
%term I_PLUS
%term I_MINUS
%term I_TIMES
%term I_SLASH
%term I_MOD
%term I_AND
%term I_OR
%term I_XOR
%term I_LSHIFT
%term I_RSHIFT
%term I_SRSHIFT
/* fetch and store	*/
%term I_CFETCH
%term I_FETCH
%term I_CSTORE
%term I_STORE
/* compare		*/
/* %term I_EQUALS */
%term I_LESS
%term I_ULESS

%term I_0BRANCH
%term I_BRANCH
%term I_MOVE

/* general		*/
%term I_REG
%term I_LIT
%term I_LITS
%term NOP

/* %term I_LITF=40 I_FNEGATE=41 I_FPLUS=42 I_FMINUS=43 I_FTIMES=44  I_FSLASH=45
   %term I_FFETCH=46  I_FSTORE=47
*/

/*
In the following a line is divided into fields with #:

rule# cost# reducing# assembling

rule is a Burg rule, cost is an integer, reducing and assembling are
Forth code.

Rules: Each nonterminal has a stack effect, that describes what
happens when (a tree derived from) the nonterminal is (parsed and)
reduced.

The stack effects for our non-terminals are:
reg	( -- ml )
stmt	( -- ml )
cons	( -- n )
con	( -- n )
addr	( -- ml n )

For a given rule, burm-reduce first (parses and) reduces the children
(which produce their respective stack effects) left to right, then
pushes the IL node, the (number of the) target nonterminal, and the xt
of a definition containing the "assembling" code, then it executes the
"reducing" code.

I.e. the reducing code must have the stack effect

stuff1 node nt asm-xt -- stuff2

where stuff1 is the stack contents produced by the children of the
rule, and stuff2 is the right side of the stack effect for the target
nonterminal of the rule.

The assembling code is usually called by the assembler and should have
the stack effect ( ml -- ), where ml is the ml node of the instruction.

*/

%%

addr: I_PLUS(reg, cons)		#0#	drop 2drop	#
addr: reg			#0#	drop 2drop 0	#

reg:  I_REG			#0#	term-inst	#drop
cons: I_LITS			#0#	drop drop il-val @ #
con:  I_LIT			#0#	drop drop il-val @ #
con:  cons			#0#	drop drop drop	#
reg:  con			#1#	lit-inst	#asm-lit

reg:  I_MOVE(reg)		#1#	move-inst	#asm-move

reg:  I_CFETCH(addr)		#1#	load-inst	#asm-fetchc
reg:  I_FETCH(addr)		#1#	load-inst	#asm-fetchi

reg:  I_PLUS(reg, reg)		#1#	bin-inst	#asm-add
reg:  I_PLUS(reg, cons)		#1#	binrc-inst	#asm-addi
con:  I_PLUS(con, con)		#0#	drop drop drop + #
reg:  I_MINUS(reg, reg)		#1#	bin-inst	#asm-sub
con:  I_MINUS(con, con)		#0#	drop drop drop - #
reg:  I_TIMES(reg, reg)		#1#	bin-inst	#asm-mul
reg:  I_SLASH(reg, reg)		#1#	bin-inst	#asm-div
reg:  I_MOD(reg, reg)		#1#	bin-inst	#asm-mod
reg:  I_NEGATE(reg)		#1#	un-inst		#asm-neg

reg:  I_AND(reg, reg)		#1#	bin-inst	#asm-and
reg:  I_AND(reg, cons)		#1#	binrc-inst	#asm-andi
reg:  I_OR(reg, reg)		#1#	bin-inst	#asm-or
reg:  I_OR(reg, cons)		#1#	binrc-inst	#asm-ori
reg:  I_XOR(reg, reg)		#1#	bin-inst	#asm-xor
reg:  I_XOR(reg, cons)		#1#	binrc-inst	#asm-xori
reg:  I_INVERT(reg)		#1#	un-inst		#asm-not
reg:  I_LSHIFT(reg, reg)	#1#	bin-inst	#asm-lsh
reg:  I_LSHIFT(reg, cons)	#1#	binrc-inst	#asm-lshi
reg:  I_RSHIFT(reg, reg)	#1#	bin-inst	#asm-rshu
reg:  I_SRSHIFT(reg, reg)	#1#	bin-inst	#asm-rsh
reg:  I_RSHIFT(reg, cons)	#1#	binrc-inst	#asm-rshui
reg:  I_SRSHIFT(reg, cons)	#1#	binrc-inst	#asm-rshi

reg:  I_LESS(reg, reg)		#1#	bin-inst	#asm-slt
reg:  I_LESS(reg, cons)		#1#	binrc-inst	#asm-slti
reg:  I_ULESS(reg, reg)		#1#	bin-inst	#asm-sltu
reg:  I_ULESS(reg, cons)	#1#	binrc-inst	#asm-sltui

stmt: reg			#0#	drop 2drop	#
stmt: I_CSTORE(reg, addr)	#1#	store-inst	#asm-storec
stmt: I_STORE(reg, addr)	#1#	store-inst	#asm-storei
stmt: I_0BRANCH(reg)		#1#	0branch-inst	#asm-0branch
stmt: I_BRANCH			#1#	branch-inst	#asm-branch
%%
